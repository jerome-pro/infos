{{indexmenu_n>5}}

====== VIEW ======

===== classe =====
<file>
var AppointmentView = Backbone.View.extend({
render: function() {
     $(this.el).html('<li>' + this.model.get('title') + '</li>');
  }  
});
</file>

<note important>
"AppointmentView" est une **fonction**!!
 
Il s'agit même d'un **constructeur**, à utiliser avec "**new**".
</note>

<note important>
La class view **doit définir la méthode 'render'** chargée d'afficher les **données contenues dans le modèle**.
</note>

===== instance =====

<file>
var appointmentView = new AppointmentView(
   {model: appointment}
);
</file>

<note important>le paramètre du constructeur est un **objet** de type **Backbone.Model**!!</note>

<note warning>
Il faut appeler **explicitement** la méthode "render" **avant** d'afficher la vue :
<file>
   appointmentView.render(); 
   $('#app').html(appointmentView.el);
</file>
</note>

===== View Element (EL) =====

Par défaut, le view élément est un tag **<div>**.
<file>
var SimpleView = Backbone.View.extend({});
var simpleView = new SimpleView();

console.log(simpleView.el);  /*  <div></div>  */
</file>
\\ 
On peut **modifier la valeur du tag** par défaut avec la propriété "**tagName**" :
<file>
var SimpleView = Backbone.View.extend({tagName: 'li'});
var simpleView = new SimpleView();

console.log(simpleView.el);  /*  <li></li>  */
</file>
\\ 
\\ 
Généralement, on modifiera plusieurs valeurs lors de la création de la classe de vue :
<file>
var SimpleView = Backbone.View.extend({extend({
   tagName: 'article',
   id: 'todo-view',
   className: 'todo'
   render: function(){
      var html = '<h3>' + this.model.get('description') + '</h3>';
      this.$el.html(html);
   }
});
var simpleView = new SimpleView();

console.log(simpleView.el);  /*  <article id="todo-view" class="todo"></article>  */
</file>

<note tip>
Pour manipuler le view element **avec jQuery**, il faut utiliser la notation suivante : simpleView.**$**el.
<file>
simpleView.$el.html();
</file>
</note>

===== Templating =====

===== Library =====
Backbone supporte les libraires de templating suivantes :

|  **Library**  |  **Exemple**  |
|underscore.js|<file><h3><%= description %></h3></file>|
|Mustache.js|<file><h3>{{description}}</h3></file>|
|Haml-js|<file>%h3= description</file>|
|Eco|<file><h3><%= @description %></h3></file>|

===== Exemple (underscore.js) =====
Etape pour utiliser le templating underscore.js:
\\ 
__sans template__
<file>
var AppointmentView = Backbone.View.extend({
  render: function(){
    this.$el.html('<span>' + this.model.get('title') + '</span>');
  }
});
</file>
\\ 
__On définit le template :__
<file>
var AppointmentView = Backbone.View.extend({
 template: _.template('<span><%= title %></span>'),

  render: function(){
    this.$el.html('<span>' + this.model.get('title') + '</span>');
  }
});
</file>

\\ 
__On refactore "render" pour utiliser le template :__
<file>
var AppointmentView = Backbone.View.extend({
 template: _.template(''),

  render: function(){
     this.$el.html(this.template(this.model.toJSON()));
  }
});
</file>

<note warning>
On remarquera que le template utilise la **représentation JSON** du modèle.
</note>

===== Event Listeners =====
==== Définir un listener ====
On peut définir des event listeners dans les vues avec la syntaxe suivante:
<file>
events: {
   "< event> <selector>": "<method>"
}
</file>

par exemple, ici, on définit un listener qui écoute les **clicks** sur le titre **<h1>** de la vue **AppointmentView** :
<file>
var AppointmentView = Backbone.View.extend({
  ...
  
  events: { 
     "click h1": "alertTitle" 
   },
   alertTitle: function(){
      alert(this.model.get('title'));
  }
});
</file>
\\ 
==== Définir plusieurs listeners ====
pour définir **plusieurs listeners** gérés par la même vue : 
<file>
var DocumentView = Backbone.View.extend({
   events: {
      "click .icon.doc" : "select",
      "click .show_notes" : "toggleNotes",
      "click .title .lock" : "editAccessLevel",
      "mouseover .title .date" : "showTooltip"
   },
   
   select: function(){ ... },
   
   toggleNotes: function(){ ... },
   
   editAccessLevel: function(){ ... },
   
   showTooltip: function(){ ... },
   
   ...
});
</file>
==== Liste des événements supporté ====
=== Actions utilisateurs ===

{{:techs:backbone:list_events.png?0x0}}

=== Actions sur le modèle ===
  * "add" (model, collection, options) — when a model is added to a collection.
  * "remove" (model, collection, options) — when a model is removed from a collection.
  * "reset" (collection, options) — when the collection's entire contents have been replaced.
  * "sort" (collection, options) — when the collection has been re-sorted.
  * "change" (model, options) — when a model's attributes have changed.
  * "change:[attribute]" (model, value, options) — when a specific attribute has been updated.
  * "destroy" (model, collection, options) — when a model is destroyed.
  * "request" (model, xhr, options) — when a model (or collection) has started a request to the server.
  * "sync" (model, resp, options) — when a model (or collection) has been successfully synced with the server.
  * "error" (model, xhr, options) — when a model's save call fails on the server.
  * "invalid" (model, error, options) — when a model's validation fails on the client.
  * "route:[name]" (params) — Fired by the router when a specific route is matched.
  * "route" (router, route, params) — Fired by history (or router) when any route has been matched.
  * "all" — this special event fires for any triggered event, passing the event name as the first argument.

//tiré de la [[http://backbonejs.org/#Events-catalog|documentation backbone]]//
===== Patterns =====
==== Synchronisations entre vue et modèle ====


Il faut ajouter systématiquement **le code suivant dans la vue** afin de refléter **les changements du modèle** :
<file>
...
initialize: function(){
   this.model.on('change', this.render, this);   /* modification du modèle */
   this.model.on('destroy', this.remove, this);  /* suppression du modèle */
}
...

/* modification du modèle */
render: function(){
   ...
},

/* suppression du modèle */
remove: function(){
   this.$el.remove();
}
</file>

